@use '../internal' as *;


/// define main color pallate with css variable
/// @param {Theme-color-palette} map
/// @param {theme-mode-with-type} map
/// @return {multiple-css-variable}
/// 
:root, .light {
  @each $key, $val in $theme-palette {
    --#{$prefix}theme-#{$key}: #{nth($val, 1)};
  }
}

:root[data-#{$prefix}theme="dark"], .dark {
  @each $key, $val in $theme-palette {
    --#{$prefix}theme-#{$key}: #{nth($val, 2)};
  }
}


// @each $mode in $theme-mode {
//   $i: index($theme-mode, $mode);
//   :root[data-#{$prefix}theme=#{$mode}], .#{$mode} {
//     @each $key, $val in $theme-palette {
//       --#{$prefix}theme-#{$key}: #{nth($val, $i)};
//     }
//   }
//   // @media (prefers-color-scheme: #{$mode}) {
//   // }
// }



/// Css Color Variable [default=light]
/// @param {Color Map} From internal/theme.scss
/// 
$all-colors : map-merge($default-colors, $base-colors);
:root {
  @each $key, $value in $all-colors {
    --#{$prefix}#{$key} : #{nth($value, 1)};
  }
}
:root[data-#{$prefix}theme="dark"], .dark {
  @each $key, $value in $all-colors {
    --#{$prefix}#{$key} : #{nth($value, 1)};
  }
}
// :root[data-#{$prefix}theme="light"], .light {
//   @each $key, $value in $all-colors {
//     --#{$prefix}#{$key} : #{nth($value, 1)};
//   }
// }

/*************************************
/* Bg Color
*************************************/
@each $key, $value in $all-colors {
    .bg-#{$key} {
      background-color: nth($value, 1) !important;
    }
}
/*************************************
/* Text Bg Color
*************************************/
@each $key, $value in $all-colors {
    .text-bg-#{$key} {
      background-color: nth($value, 1) !important;
      @if(type-of($value) == list) {
          color: nth($value, 2) !important;
        }
    }
}
/*************************************
/* Table Bg Color
*************************************/
@each $key, $value in $all-colors {
    .table-#{$key} {
        background-color: nth($value, 1) !important;
      }
}
/*************************************
/* Text Color
*************************************/
@each $key, $value in $all-colors {
    .text-#{$key} {
      color: nth($value, 1);
    }
}

/*************************************
/* Link Color
*************************************/
@each $key, $value in $default-colors {
    .link-#{$key} {
      color: nth($value, 1) !important;
    }
}

/*************************************
/* CheckBox Bg Color
*************************************/
@each $key, $value in $default-colors {
    .checkbox-#{$key} {
      background: nth($value, 1) !important;
      border-color: nth($value, 1) !important;
    }
}

/*************************************
/* Radio Bg Color
*************************************/
@each $key, $value in $all-colors {
  .radio-#{$key} {
      --radio-color: #{nth($value, 1)} !important;
      --radio-bg: #{nth($value, 1)} !important;
  }
}

/*************************************
/* Switch Bg Color
*************************************/
@each $key, $value in $all-colors {
  .switch-#{$key} {
      --switch-bg: #{nth($value, 1)} !important;
      --switch-border: #{nth($value, 1)} !important;
  }
}

/*************************************
/* Dots Bg Color
*************************************/
@each $key, $value in $default-colors {
    .dot-#{$key} {
      background: nth($value, 1) !important;
    }
}


/*************************************
/* BG Hex Color
*************************************/
@each $color, $value in colorMap($base-colors, 10) {
    // Background Colors
    .bg-#{$color} {
        background-color: $value;
    }
}
/*************************************
/* Text Hex Color
*************************************/
@each $color, $value in colorMap($base-colors, 10) {
    // Text Colors
    .text-#{$color} {
        color: $value;
    }
}
/*************************************
/* Border Hex Color
*************************************/
@each $color, $value in colorMap($base-colors, 10) {
    // Border Colors
    .border-#{$color} {
        border-color: $value;
    }
}

