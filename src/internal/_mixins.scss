@use 'theme' as *;
@use 'constants' as *;
@use 'defaults' as *;
// Global Mixins

// Mixin that returns a property map as a series of CSS class properties.
// E.g. $xs: (color: #fff, opacity: 0.5), $sm... =>
// <class>--xs {
//     color: #fff;
//     opacity: 0.5;
// }

@mixin explode-properties($property-map) {

    @each $property,
    $value in $property-map {
        #{$property}: #{$value};
    }
}

@mixin input-success {
    border-color: $bee-success;

    &:focus {
        box-shadow: 0 0 0 0.2rem transparentize($bee-success, 1 - $focus-opacity), inset 0px 1px 8px rgba(0, 0, 0, 0.07);
    }
}

@mixin input-error {
    border-color: $bee-danger;

    &:focus {
        box-shadow: 0 0 0 0.2rem transparentize($bee-danger, 1 - $focus-opacity), inset 0px 1px 8px rgba(0, 0, 0, 0.07);
    }
}


// Bring to front on focus.
@mixin elevate-on-focus {
    &:focus {
        z-index: 1;
    }
}

// Container mixins
@mixin make-container($gutter: 1rem, $fluid: false) {
    --#{$prefix}gutter-x: #{$gutter};
    --#{$prefix}gutter-y: 0;
    width: 100%;
    @if($fluid: true) {
        max-width: 100%;
    }
    padding-right: calc(var(--#{$prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
    padding-left: calc(var(--#{$prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
    margin-right: auto;
    margin-left: auto;
}
  