@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass-true/sass/config/throw';
@use 'sass-true/sass/true' as *;


//   Functions
//   TODO Refactor to different categories

$DELIMETER: '-';

//  Converts a given hex value to RGB.
@function hex-to-rgb($hex) {
    @return red($hex),
    green($hex),
    blue($hex);
}


//  To generate the negative variant of classes, we want to prepend 'n' to the key and add a negative sign to the value.

//  This automatically skips string values and 0 values.
//  This also assumes that the values passed in are positive variants of classes. This will break with negative variants.

@function get-negative-value-map($map) {
    $result: ();

    @each $key,
    $value in $map {
        $to-add: ($key: $value,
        );

        @if type-of($value)==number and $key !=0 and strip-unit($value) !=0 {
            $to-add: map.merge($to-add, (n#{$key}: -#{$value}));
        }

        $result: map.merge($result, $to-add);
    }

    @return $result;
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
    @if type-of($number)=='number' and not unitless($number) {
        @return math.div($number, ($number * 0 + 1));
    }

    @return $number;
}