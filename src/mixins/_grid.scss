@use 'sass:math';

@use '../internal/constants' as *;
@use '../internal/defaults' as *;
@use '../internal/functions' as *;
@use '../internal/media-query' as *;

/// Grid system
/// @param {$space: 1rem } (default)
/// Generate a flex wrapper with negetive space

@mixin row-generator($space: $space) {
    --#{$prefix}space-x: #{$space};
    --#{$prefix}space-y: 0;
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(-1 * var(--#{$prefix}space-y));
    margin-right: calc(-.5 * var(--#{$prefix}space-x));
    margin-left: calc(-.5 * var(--#{$prefix}space-x));
}




/// col-generator
/// @param {$size: container-width } (default)
/// @param {$columns: number } (1-12)

@mixin col-generator($size: false, $columns: $grid-columns) {
  @if $size {
    @for $i from 1 through $columns {
      &-#{$i} {
        flex: 0 0 auto;
        width: get-percentage(100%, $columns) * $i;
      }
      &-offset-#{$i} {
        margin-left: get-percentage(100%, $columns) * $i;
      }    
    }
  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

/// grid-generator
/// @param {$columns: number } (1-12)
/// @param {$space: space } (default: 1rem)
/// @param {$breakpoints: $default-breakpoints } (map from default.scss)
/// Generate semantic grid columns with these mixins.

@mixin grid-generator($columns, $breakpoints: $default-breakpoints) {
  @include col-generator($columns: $columns);
  @include col-generator($size: 100%, $columns: $columns);
  
  @each $key, $val in $breakpoints {
    &-#{$key} {
      @include mq(null, $key) {
        @include col-generator($size: $val, $columns: $columns);
      }
    }
  }
}

/// col offset generator
/// col-1, col-md-6, .col-offset-2